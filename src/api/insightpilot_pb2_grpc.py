# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import insightpilot_pb2 as insightpilot__pb2

GRPC_GENERATED_VERSION = '1.73.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in insightpilot_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class InsightPilotServiceStub(object):
    """InsightPilot service definition
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetSchema = channel.unary_unary(
                '/insightpilot.InsightPilotService/GetSchema',
                request_serializer=insightpilot__pb2.SchemaRequest.SerializeToString,
                response_deserializer=insightpilot__pb2.SchemaResponse.FromString,
                _registered_method=True)
        self.ExecuteQuery = channel.unary_unary(
                '/insightpilot.InsightPilotService/ExecuteQuery',
                request_serializer=insightpilot__pb2.QueryRequest.SerializeToString,
                response_deserializer=insightpilot__pb2.QueryResponse.FromString,
                _registered_method=True)
        self.ListConnections = channel.unary_unary(
                '/insightpilot.InsightPilotService/ListConnections',
                request_serializer=insightpilot__pb2.ListConnectionsRequest.SerializeToString,
                response_deserializer=insightpilot__pb2.ListConnectionsResponse.FromString,
                _registered_method=True)
        self.HealthCheck = channel.unary_unary(
                '/insightpilot.InsightPilotService/HealthCheck',
                request_serializer=insightpilot__pb2.HealthRequest.SerializeToString,
                response_deserializer=insightpilot__pb2.HealthResponse.FromString,
                _registered_method=True)


class InsightPilotServiceServicer(object):
    """InsightPilot service definition
    """

    def GetSchema(self, request, context):
        """Get database schema
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ExecuteQuery(self, request, context):
        """Execute natural language query
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListConnections(self, request, context):
        """List available connections
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def HealthCheck(self, request, context):
        """Health check
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_InsightPilotServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetSchema': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSchema,
                    request_deserializer=insightpilot__pb2.SchemaRequest.FromString,
                    response_serializer=insightpilot__pb2.SchemaResponse.SerializeToString,
            ),
            'ExecuteQuery': grpc.unary_unary_rpc_method_handler(
                    servicer.ExecuteQuery,
                    request_deserializer=insightpilot__pb2.QueryRequest.FromString,
                    response_serializer=insightpilot__pb2.QueryResponse.SerializeToString,
            ),
            'ListConnections': grpc.unary_unary_rpc_method_handler(
                    servicer.ListConnections,
                    request_deserializer=insightpilot__pb2.ListConnectionsRequest.FromString,
                    response_serializer=insightpilot__pb2.ListConnectionsResponse.SerializeToString,
            ),
            'HealthCheck': grpc.unary_unary_rpc_method_handler(
                    servicer.HealthCheck,
                    request_deserializer=insightpilot__pb2.HealthRequest.FromString,
                    response_serializer=insightpilot__pb2.HealthResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'insightpilot.InsightPilotService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('insightpilot.InsightPilotService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class InsightPilotService(object):
    """InsightPilot service definition
    """

    @staticmethod
    def GetSchema(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/insightpilot.InsightPilotService/GetSchema',
            insightpilot__pb2.SchemaRequest.SerializeToString,
            insightpilot__pb2.SchemaResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ExecuteQuery(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/insightpilot.InsightPilotService/ExecuteQuery',
            insightpilot__pb2.QueryRequest.SerializeToString,
            insightpilot__pb2.QueryResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListConnections(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/insightpilot.InsightPilotService/ListConnections',
            insightpilot__pb2.ListConnectionsRequest.SerializeToString,
            insightpilot__pb2.ListConnectionsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def HealthCheck(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/insightpilot.InsightPilotService/HealthCheck',
            insightpilot__pb2.HealthRequest.SerializeToString,
            insightpilot__pb2.HealthResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
